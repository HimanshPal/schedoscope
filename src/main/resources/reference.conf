soda {
    app {
        environment = "dev"                                                         # environment we are in
        parsedViewAugmentorClass = "com.ottogroup.bi.soda.dsl.views.NoAugmentation" # view augmentor (class extending com.ottogroup.bi.soda.dsl.views.ViewUrlParser.ParsedViewAugmentor) to use for dynamic view instantation in web service.
    }

    scheduler {
        earliestDay = "2013-12-01"                                                  # earliest date to consider for date parameterization arithmetics
        latestDay   = "now"                                                         # latest date to consider for date parameterization arithmetics (now or a date)
    
        timeouts {
            schema = 1 hour                     # timeout waiting for schema operations
            statusListAggregation = 60 seconds  # timeout waiting for status list compilations
            viewManagerResponse = 60 seconds    # timeout waiting for viewManager
            completion = 3 days                 # timeout waiting for completion of view jobs
        }
    }

    webservice {
        timeout = 10 minutes                # timeout for web service calls
        port = 20698                        # port of the web service
    }

    kerberos {
        principal = ""                      # hive kerberos principal, defaults to ""
    }

    hadoop {
        resourceManager = "localhost:8032"  # Address and port of the YARN resource manager
        nameNode = "localhost:8020"         # Address and port of the YARN resource manager
    }

    metastore {
        metastoreUri = "thrift://localhost:9083"                # Thrift URI to metastore service
        jdbcUrl = "jdbc:hive2://localhost:10000/default"        # Hive JDBC URL
    }
        
    versioning {
        transformations = true              # transformation versions contribute to the version of a view instance  
    }
    
    action.retry = 5
    
    transformations = {
        hive : {
            location = "/tmp/soda/hive/"    # location where to put hive UDFs in HDFS
            libDirectory = ""               # comma-separated directories with addition libs to put into location
            url = "jdbc:hive2://localhost:10000/default" # Hive JDBC URL
            unpack = false                  # need hive jars be unpacked? No!
            concurrency = 10                # number of parallel actors to execute hive transformations
            timeout = 1 day                 # timeout for hive transformations
        },
        oozie : {
            location = "/tmp/soda/oozie/"   # location where to put oozie bundles in HDFS
            libDirectory = ""               # comma-separated directories with addition libs to put into location
            url = "http://localhost:11000/oozie"    # URL to Oozie server
            concurrency = 10                # number of parallel actors to execute oozie transformations
            unpack = true                   # need hive oozie bundles be unpacked? Yes!
            timeout = 1 day                 # timeout for oozie transformations
        },    
        filesystem : {
            concurrency = 1                 # number of parallel actors to execute file systems transformations
            location = "/"                  # ignore
            libDirectory = ""               # ignore
            url = ""                        # ignore
            unpack = false                  # ignore
            timeout = 1 hour                # timeout for filesystem transformations
        }   
    }
}

akka {
    log-config-on-start = off
    log-dead-letters = off
    loglevel = "INFO"
    
    actor {
           
        debug {
            receive = off	
            autoreceive = off
            lifecycle = off
        }
		
        views-dispatcher {
        	 executor = "thread-pool-executor"
        	         	         	 
        	 thread-pool-executor {
		        core-pool-size-min = 8
		        core-pool-size-factor = 4.0
		        core-pool-size-max = 160
		        task-queue-size = -1
		      }
		      
		      throughput = 1
		}						
		
        actions-manager-dispatcher {
        	type = PinnedDispatcher
        	executor = "thread-pool-executor"
        	thread-pool-executor.allow-core-timeout=off        	
		}
		
        view-manager-dispatcher {
        	type = PinnedDispatcher
        	executor = "thread-pool-executor"
        	thread-pool-executor.allow-core-timeout=off        	
		}						
				    
        future-driver-dispatcher {
        	type = Dispatcher
        	executor = "thread-pool-executor"  

        	thread-pool-executor {
		        core-pool-size-min = 8
		        core-pool-size-factor = 4.0
		        core-pool-size-max = 160
		        task-queue-size = -1
		    }
		    
		    throughput = 1
		}				    
				    
        future-call-dispatcher {
        	type = Dispatcher
        	executor = "thread-pool-executor"          	   	 
        	   	 
        	thread-pool-executor {
		        core-pool-size-min = 8
		        core-pool-size-factor = 4.0
		        core-pool-size-max = 160
		        task-queue-size = -1
		    }
		}
			
		
    }
}