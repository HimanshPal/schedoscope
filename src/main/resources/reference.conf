soda {
	app {
		environment = "dev"  														# environment we are in
		parsedViewAugmentorClass = "com.ottogroup.bi.soda.dsl.views.NoAugmentation"	# view augmentor (class extending com.ottogroup.bi.soda.dsl.views.ViewUrlParser.ParsedViewAugmentor) to use for dynamic view instantation in web service.
	}

	scheduler {
		timeouts {
			action = 3 hours				# action timeout
			dependency = 3 days				# timeout waiting for dependencies
			status = 1 second				# status timeout
		}
	}

	webservice {
		timeout = 10 minutes				# timeout for web service calls
		port = 20698						# port of the web service
	}

	kerberos {
		principal = "" 	# hive kerberos principal, defaults to ""
	}

	hadoop {
		resourceManager = "localhost:8032"						# Address and port of the YARN resource manager
		nameNode = "localhost:8020"						# Address and port of the YARN resource manager
	}

	metastore {
		metastoreUri = "thrift://localhost:9083"				# Thrift URI to metastore service
		jdbcUrl = "jdbc:hive2://localhost:10000/default"		# Hive JDBC URL
	}
	
	timeouts {
	      hive = 1 day
	      oozie = 1 day
	      file = 2 hours
	      schema = 2 hours
	      dependency = 4 days
	      all = 14 days
	}
	
	versioning {
	      transformations = false	
	}
	
	transformations = {
		hive : {
			location = "/tmp/soda/hive/"	# location where to put hive UDFs in HDFS
			libDirectory = ""				# comma-separated directories with addition libs to put into location
			url = "jdbc:hive2://localhost:10000/default" # Hive JDBC URL
			unpack = false					# need hive jars be unpacked? No!
			concurrency = 10			    # number of parallel actors to execute hive transformations
		},
		oozie : {
			location = "/tmp/soda/oozie/"  	# location where to put oozie bundles in HDFS
			libDirectory = ""				# comma-separated directories with addition libs to put into location
			url = "http://localhost:11000/oozie"	# URL to Oozie server
			concurrency = 10				# number of parallel actors to execute oozie transformations
			unpack = true					# need hive oozie bundles be unpacked? Yes!
		}    
		filesystem : {
			concurrency = 1					# number of parallel actors to execute file systems transformations
			location = "/"					# ignore
			libDirectory = ""				# ignore
			url = ""						# ignore
			unpack = false					# ignore
		}   
	}
}

stats-dispatcher {
	type = Dispatcher
	executor = "fork-join-executor"
	fork-join-executor {
		parallelism-min = 2
		parallelism-factor = 2.0
		parallelism-max = 2
	}
	thread-pool-executor {
		core-pool-size-min = 2
		core-pool-size-factor = 2.0
		core-pool-size-max = 2
	}
	throughput = 100
}

server-dispatcher {
	executor = "thread-pool-executor"
	type = PinnedDispatcher
}
  
router-dispatcher {
	executor = "thread-pool-executor"
	type = PinnedDispatcher
}
  
opentsdb-dispatcher {
	executor = "thread-pool-executor"
	type = PinnedDispatcher
}
default-dispatcher {
    type = "Dispatcher"
    executor = "thread-pool-executor"

    fork-join-executor {
        parallelism-min = 8
        parallelism-factor = 3.0
        parallelism-max = 64
    }

    thread-pool-executor {
        keep-alive-time = 60s
        core-pool-size-min = 8
        core-pool-size-factor = 3.0
        core-pool-size-max = 64
        max-pool-size-min = 8
        max-pool-size-factor  = 3.0
        max-pool-size-max = 64
        task-queue-size = -1
        task-queue-type = "linked"

        allow-core-timeout = on
    }
}
akka.log-dead-letters-during-shutdown = false
akka.log-dead-letters = 0
akka {
  log-config-on-start = off
}