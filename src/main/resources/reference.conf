soda {
	app {
		environment = "dev"  				# environment we are in, defaults to dev
		//libDirectory = "pathToSoda.jar/"	# directory where the lib jar files are, defaults to path where soda.jar can be found
		//parsedViewAugmentorClass = ""     # view augmentor (class extending com.ottogroup.bi.soda.dsl.views.ViewUrlParser.ParsedViewAugmentor) to use for dynamic view instantation in web service. Defaults to ""
	}

	scheduler {
		timeouts {
			action = 3 hours				# action timeout
			dependency = 3 days				# timeout waiting for dependencies
			status = 1 second				# status timeout
		}
	}

	webservice {
		timeout = 10 minutes				# timeout for web service calls, defaults to ""
		//port = 20698						# defaults to 20698
	}
	

	metastore {
		metastoreUri = "thrift://...:9083"	# Thrift URI to metastore service, defaults to ""
		jdbcUrl = "jdbc:hive2://....:10000/default;principal=hive/...@...."	# Hive JDBC URL, defaults to ""
	}

	kerberos {
		principal = "hive/...@..."			# hive kerberos principal, defaults to ""
	}

	transformations = {
		hive : {
			//location = "hdfs://...:8020/tmp/soda/hive/"	# location where to put hive UDFs, defaults to hdfs:///tmp/soda/hive
			//libDirectory = "..."							# directory with addition libs to put into location, defaults to ""
			unpack = false									# need hive jars be unpacked? No!
			concurrency = 10								# number of parallel actors to execute hive transformations
		},
		oozie : {
			//location = "hdfs://...:8020/tmp/soda/oozie/"  # location where to put oozie bundles, defaults to hdfs:///tmp/soda/oozie
			//url = "http://...:11000/oozie"			    # URL to Oozie server
			concurrency = 10								# number of parallel actors to execute oozie transformations
			unpack = true									# need hive oozie bundles be unpacked? Yes!
		}    
		file : {
			concurrency = 1									# number of parallel actors to execute file systems transformations
		}   
	}
}

stats-dispatcher {
	type = Dispatcher
	executor = "fork-join-executor"
	fork-join-executor {
		parallelism-min = 2
		parallelism-factor = 2.0
		parallelism-max = 2
	}
	thread-pool-executor {
		core-pool-size-min = 2
		core-pool-size-factor = 2.0
		core-pool-size-max = 2
	}
	throughput = 100
}

server-dispatcher {
	executor = "thread-pool-executor"
	type = PinnedDispatcher
}
  
router-dispatcher {
	executor = "thread-pool-executor"
	type = PinnedDispatcher
}
  
opentsdb-dispatcher {
	executor = "thread-pool-executor"
	type = PinnedDispatcher
}

akka.log-dead-letters-during-shutdown = false
akka.log-dead-letters = 0
akka {
}